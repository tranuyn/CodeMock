"use client";

import { getInterviewSessionById } from "@/api/interview/interview-session";
import { useEffect, useState } from "react";
import {
  Box,
  Typography,
  Grid,
  Button,
  Divider,
  Paper,
  Avatar,
  Chip,
  CircularProgress,
} from "@mui/material";
import CalendarMonthIcon from "@mui/icons-material/CalendarMonth";
import AccessTimeIcon from "@mui/icons-material/AccessTime";
import CodeRoundedIcon from "@mui/icons-material/CodeRounded";
import PlayCircleOutlineIcon from "@mui/icons-material/PlayCircleOutline";
import { InterviewSessionResult } from "@/api/interview/interview-session.type";
import InfoCard from "./Components/InfoCard";
import RegisterSlotForm from "@/app/components/RegisterSlotForm";

export default function InterviewSection({
  params,
}: {
  params: { id: string };
}) {
  const [interview, setInterview] = useState<InterviewSessionResult>();
  const [isRegisterOpen, setIsRegisterOpen] = useState(false);

  useEffect(() => {
    const fetchInterviews = async () => {
      try {
        const session = (await getInterviewSessionById(
          params.id
        )) as InterviewSessionResult; 
        setInterview(session);
      } catch (err) {
        console.error("L·ªói khi l·∫•y d·ªØ li·ªáu ph·ªèng v·∫•n:", err);
      }
    };
    fetchInterviews();
  }, [params.id]);

  const start = new Date(interview?.startTime ?? 0);
  const end = new Date(
    interview?.endTime ||
      start.getTime() +
        (interview?.totalSlots ?? 0) * (interview?.slotDuration ?? 0) * 60000
  );

  const bookedCount =
    interview?.interviewSlots?.filter(
      (s: { status: string }) => s.status === "booked"
    ).length ?? 0;
  const remainingCount = (interview?.totalSlots ?? 0) - bookedCount;

  return (
    <Box sx={{ p: 2, bgcolor: "#f9f9f9" }}>
      {interview ? (
        <Grid container spacing={2}>
          {/* LEFT MAIN CONTENT */}
          <Grid size={{ xs: 12, md: 8 }}>
            <Paper sx={{ p: 3, mb: 2 }}>
              <Typography variant="h6" fontWeight="bold">
                [Interview] {interview.title || "Full Stack Developer"}
              </Typography>

              <Box sx={{ display: "flex", gap: 2, mt: 2, mb: 2 }}>
                <Chip
                  icon={<CalendarMonthIcon />}
                  label={start.toLocaleDateString("vi-VN")}
                />
                <Chip
                  icon={<AccessTimeIcon />}
                  label={`${interview.slotDuration} ph√∫t`}
                />
                <Chip
                  icon={<PlayCircleOutlineIcon />}
                  label={`${start.getHours()}:00 - ${end.getHours()}:00`}
                />
              </Box>
              <Divider orientation="vertical" variant="middle" />
              <Typography fontSize={14} mb={2}>
                S·ªë l∆∞·ª£ng ban ƒë·∫ßu: {interview.totalSlots} | S·ªë l∆∞·ª£ng ƒë√£ ƒëƒÉng k√Ω:{" "}
                {bookedCount} | S·ªë l∆∞·ª£ng c√≤n l·∫°i: {remainingCount}
              </Typography>

              <Button
                variant="contained"
                color="primary"
                fullWidth
                sx={{ mb: 3 }}
                onClick={() => setIsRegisterOpen(true)}
              >
                ƒêƒÉng k√Ω ngay
              </Button>
            </Paper>
            <Paper sx={{ p: 3 }}>
              <Typography
                variant="h4"
                gutterBottom
                sx={{ fontWeight: "semiBold" }}
              >
                Chi ti·∫øt bu·ªïi ph·ªèng v·∫•n
              </Typography>
              <Typography component={'div'} dangerouslySetInnerHTML={{ __html: interview.description }}/>
              <Typography variant="body2" color="text.secondary" mb={2}>
                H·∫°n n·ªôp h·ªì s∆°:{" "}
                {new Date(start.getTime() - 86400000).toLocaleDateString(
                  "vi-VN"
                )}
              </Typography>

              <Divider sx={{ my: 2 }} />
              <Typography variant="h6" gutterBottom>
                <CodeRoundedIcon color="secondary" /> V·ªã tr√≠{" "}
                <span style={{ fontWeight: 400, fontSize: "1rem" }}>
                  {interview.level.name}
                </span>
              </Typography>
              <Typography variant="h6" gutterBottom>
                <CodeRoundedIcon color="secondary" /> Chuy√™n ng√†nh{" "}
                {interview.majors.map((tech: { id: string; name: string }) => (
                  <span
                    style={{ fontWeight: 400, fontSize: "1rem" }}
                    key={tech.id}
                  >
                    {tech.name}
                  </span>
                ))}
              </Typography>
              <Typography variant="h6" gutterBottom>
                <CodeRoundedIcon color="secondary" /> Y√™u c·∫ßu c√¥ng ngh·ªá
              </Typography>
              <ul
                style={{
                  listStylePosition: "inside",
                  listStyleType: "disc",
                  paddingLeft: 20,
                }}
              >
                {interview.requiredTechnologies.map(
                  (tech: { id: string; name: string }) => (
                    <li key={tech.id}>{tech.name}</li>
                  )
                )}
              </ul>

              <Typography variant="h6" gutterBottom sx={{ mt: 2 }}>
                <CodeRoundedIcon color="secondary" /> L·ª£i √≠ch khi tham gia
              </Typography>
              <ul
                style={{
                  listStylePosition: "inside",
                  listStyleType: "disc",
                  paddingLeft: 20,
                }}
              >
                <li>G·∫∑p chuy√™n gia c√≥ kinh nghi·ªám</li>
                <li>G√≥p √Ω chi ti·∫øt v·ªÅ CV, portfolio</li>
                <li>C∆° h·ªôi nh·∫≠n offer th·ª±c t·∫≠p/ph√π h·ª£p</li>
                <li>M·ªü r·ªông networking ng√†nh IT</li>
              </ul>

              <Typography variant="h6" gutterBottom sx={{ mt: 2 }}>
                <CodeRoundedIcon color="secondary" /> Chu·∫©n b·ªã cho bu·ªïi ph·ªèng
                v·∫•n
              </Typography>
              <ul
                style={{
                  listStylePosition: "inside",
                  listStyleType: "disc",
                  paddingLeft: 20,
                }}
              >
                <li>CV ƒë√£ c·∫≠p nh·∫≠t</li>
                <li>Portfolio c√°c project ƒë√£ l√†m</li>
                <li>Laptop ƒë·ªÉ demo n·∫øu c√≥</li>
                <li>C√¢u h·ªèi cho chuy√™n gia</li>
              </ul>

              <Typography variant="body1" sx={{ mt: 2 }}>
                <strong>ƒê·ªãa ƒëi·ªÉm ph·ªèng v·∫•n:</strong> Microsoft Teams
              </Typography>

              <Typography variant="body1" sx={{ mt: 1 }}>
                <strong>C√°ch th·ª©c tham gia:</strong> B·∫•m ƒêƒÉng k√Ω
              </Typography>
            </Paper>
          </Grid>

          {/* RIGHT SIDEBAR */}
          <Grid size={{ xs: 12, md: 4 }}>
            <Box display="flex" flexDirection="column" gap={2}>
              <Paper
                sx={{
                  display: "flex",
                  flexDirection: "row",
                  alignItems: "center",
                  p: 2,
                  gap: 2,
                }}
              >
                <Avatar
                  alt={interview.mentor.username}
                  src={interview.mentor.avatarUrl}
                  sx={{ width: 80, height: 80, mb: 1 }}
                />
                <Box>
                  <Typography fontWeight="bold">
                    {interview.mentor.username}
                  </Typography>
                  <Typography fontSize={13}>
                    {interview.mentor.address}
                  </Typography>
                  {interview.mentor.educationBackground?.map((edu, index) => (
                    <Typography key={index} fontSize={13}>
                      {edu.yearStart} - {edu.yearEnd} ‚Ä¢ {edu.position} t·∫°i{" "}
                      {edu.work_space}
                    </Typography>
                  ))}
                </Box>
              </Paper>

              <InfoCard
                title="C√¥ng vi·ªác hi·ªán t·∫°i"
                icon="üìò"
                items={[
                  { text: "Project Manager t·∫°i C√¥ng ty ABC Technology" },
                  { text: "Qu·∫£n l√Ω team ph√°t tri·ªÉn v·ªõi 20+ th√†nh vi√™n" },
                  { text: "Ph·ª• tr√°ch c√°c d·ª± √°n Enterprise Software" },
                ]}
              />
              <InfoCard
                title="Kinh nghi·ªám l√†m vi·ªác"
                icon="üíº"
                items={
                  interview.mentor.experiences?.map((exp) => ({
                    text: `${exp.yearStart} - ${exp.yearEnd} ‚Ä¢ ${exp.position} t·∫°i ${exp.work_space}`,
                    imageUrl: exp.imageUrl,
                  })) || []
                }
                lightTheme={false}
              />
              <InfoCard
                title="Chuy√™n m√¥n & k·ªπ nƒÉng"
                icon="üõ†Ô∏è"
                items={
                  interview.mentor.skills?.map((skill) => ({
                    text: `${skill.name} (${skill.proficiency_level ?? "Unknown"} - ${skill.years_of_experience ?? 0} yrs): ${skill.detail ?? ""}`,
                  })) || []
                }
              />
            </Box>
          </Grid>
        </Grid>
      ) : (
        <Box sx={{ display: "flex", justifyContent: "center" }}>
          <CircularProgress />
        </Box>
      )}
      <RegisterSlotForm
        open={isRegisterOpen}
        onClose={() => setIsRegisterOpen(false)}
        slots={interview?.interviewSlots || []}
        interviewId={interview?.sessionId || ""}
      />
    </Box>
  );
}
